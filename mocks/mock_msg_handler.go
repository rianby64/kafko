// Code generated by MockGen. DO NOT EDIT.
// Source: kafko (interfaces: MsgHandler)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_msg_handler.go -package=mocks kafko MsgHandler
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kafka "github.com/segmentio/kafka-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMsgHandler is a mock of MsgHandler interface.
type MockMsgHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMsgHandlerMockRecorder
}

// MockMsgHandlerMockRecorder is the mock recorder for MockMsgHandler.
type MockMsgHandlerMockRecorder struct {
	mock *MockMsgHandler
}

// NewMockMsgHandler creates a new mock instance.
func NewMockMsgHandler(ctrl *gomock.Controller) *MockMsgHandler {
	mock := &MockMsgHandler{ctrl: ctrl}
	mock.recorder = &MockMsgHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgHandler) EXPECT() *MockMsgHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockMsgHandler) Handle(arg0 context.Context, arg1 *kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMsgHandlerMockRecorder) Handle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMsgHandler)(nil).Handle), arg0, arg1)
}
